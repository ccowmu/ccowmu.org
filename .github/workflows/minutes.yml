name: Build Minutes Site

on:
  schedule:
    # Run daily at 6 AM UTC to check for new minutes
    - cron: '0 6 * * *'
  workflow_dispatch:
    # Allow manual trigger

jobs:
  build-minutes:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout main repo
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Checkout minutes repo
      uses: actions/checkout@v4
      with:
        repository: ccowmu/minutes
        path: minutes-repo
        
    - name: Setup Hugo
      uses: peaceiris/actions-hugo@v3
      with:
        hugo-version: 'latest'
        extended: true
        
    - name: Setup Hugo site structure
      run: |
        # Hugo site already exists, just ensure config is updated
        cd hugo-minutes
        
        # Only create hugo.toml if it doesn't exist or needs updating
        if [ ! -f "hugo.toml" ]; then
          cat > hugo.toml << 'EOF'
        baseURL = '/minutes'
        relativeURLs = true
        canonifyURLs = false
        languageCode = 'en-us'
        title = 'CCaWMU Meeting Minutes'
        theme = 'minutes-theme'

        [pagination]
        pagerSize = 20

        [markup]
        [markup.goldmark]
        [markup.goldmark.renderer]
        unsafe = true

        [params]
        clubName = 'Computer Club at WMU'
        description = 'Meeting minutes archive for CCaWMU'
        EOF
        fi
        
        # Ensure theme directory exists
        if [ ! -d "themes/minutes-theme" ]; then
          mkdir -p themes/minutes-theme/layouts/_default
          mkdir -p themes/minutes-theme/layouts/partials
          mkdir -p themes/minutes-theme/static/css
          mkdir -p themes/minutes-theme/static/js
          mkdir -p themes/minutes-theme/static/images
        fi
        
        # Always copy main site assets to Hugo theme (overwrite existing)
        echo "Copying main site assets to Hugo theme..."
        mkdir -p themes/minutes-theme/static/{css,js,images}
        cp -r ../css/* themes/minutes-theme/static/css/ || echo "Warning: CSS files not found"
        cp -r ../js/* themes/minutes-theme/static/js/ || echo "Warning: JS files not found"
        cp -r ../images/* themes/minutes-theme/static/images/ || echo "Warning: Image files not found"
        cp ../favicon.ico themes/minutes-theme/static/ || echo "Warning: Favicon not found"
        
        # Always copy includes as partials (overwrite existing)
        echo "Copying header and footer includes..."
        cp ../includes/header.html themes/minutes-theme/layouts/partials/ || echo "Warning: Header not found"
        cp ../includes/footer.html themes/minutes-theme/layouts/partials/ || echo "Warning: Footer not found"
        
        # Verify assets were copied
        echo "Verifying copied assets:"
        ls -la themes/minutes-theme/static/ || echo "Static directory not found"
        ls -la themes/minutes-theme/static/css/ || echo "CSS directory not found"
        ls -la themes/minutes-theme/static/js/ || echo "JS directory not found"
        ls -la themes/minutes-theme/static/images/ || echo "Images directory not found"
        
    - name: Create Hugo templates
      run: |
        cd hugo-minutes
        
        # Only create templates if they don't exist to avoid overwriting customizations
        if [ ! -f "themes/minutes-theme/layouts/_default/baseof.html" ]; then
          # Create base template
          cat > themes/minutes-theme/layouts/_default/baseof.html << 'EOF'
        <!DOCTYPE html>
        <html lang="{{ .Site.LanguageCode }}">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>{{ block "title" . }}{{ .Site.Title }}{{ end }}</title>
            <meta name="description" content="{{ .Site.Params.description }}">
            
            <!-- Favicon and Icons -->
            <link rel="icon" href="{{ "favicon.ico" | relURL }}" sizes="16x16 32x32">
            <link rel="icon" type="image/png" sizes="16x16" href="{{ "images/icon-16x16.png" | relURL }}">
            <link rel="icon" type="image/png" sizes="32x32" href="{{ "images/icon-32x32.png" | relURL }}">
            <link rel="icon" type="image/png" sizes="48x48" href="{{ "images/icon-48x48.png" | relURL }}">
            
            <!-- CSS -->
            <link rel="stylesheet" href="{{ "css/style.css" | relURL }}">
            <link rel="stylesheet" href="{{ "css/style.min.css" | relURL }}">
        </head>
        <body>
            <!-- Use the main site header -->
            {{ partial "header.html" . }}
            
            <main class="main-content">
                {{ block "main" . }}{{ end }}
            </main>
            
            <!-- Use the main site footer -->
            {{ partial "footer.html" . }}
            
            <!-- JavaScript -->
            <script src="{{ "js/main.js" | relURL }}" async></script>
        </body>
        </html>
        EOF
        fi
        
        # Create list template (for minutes index) if it doesn't exist
        if [ ! -f "themes/minutes-theme/layouts/_default/list.html" ]; then
          cat > themes/minutes-theme/layouts/_default/list.html << 'EOF'
        {{ define "title" }}Meeting Minutes - {{ .Site.Title }}{{ end }}
        
        {{ define "main" }}
        <div class="container" style="margin-top: var(--header-height); padding: 4rem 2rem;">
            <header class="page-header" style="text-align: center; margin-bottom: 3rem;">
                <h1 style="font-size: 3rem; color: var(--text-primary); margin-bottom: 1rem;">Meeting Minutes</h1>
                <p style="color: var(--text-secondary); font-size: 1.2rem; margin-bottom: 2rem;">{{ .Site.Params.description }}</p>
                <div class="stats" style="display: flex; justify-content: center; gap: 2rem; color: var(--text-muted); font-size: 1rem;">
                    <span class="total-count">{{ len .Site.RegularPages }} total meetings</span>
                    <span class="current-page">Page {{ .Paginator.PageNumber }} of {{ .Paginator.TotalPages }}</span>
                </div>
            </header>
            
            <div class="search-controls" style="max-width: 800px; margin: 0 auto 3rem; display: flex; gap: 1rem; flex-wrap: wrap; justify-content: center;">
                <div class="search-box" style="flex: 1; min-width: 300px;">
                    <input type="text" id="search" placeholder="Search minutes by date or content..." 
                           style="width: 100%; padding: 1rem; border: 1px solid var(--border-color); border-radius: 8px; 
                                  background: var(--bg-secondary); color: var(--text-primary); font-size: 1rem;" />
                </div>
                <div class="year-filter" style="min-width: 200px;">
                    <select id="year-filter" 
                            style="width: 100%; padding: 1rem; border: 1px solid var(--border-color); border-radius: 8px; 
                                   background: var(--bg-secondary); color: var(--text-primary); font-size: 1rem;">
                        <option value="">All years</option>
                    </select>
                </div>
            </div>
            
            <div class="minutes-grid" id="minutes-list" 
                 style="display: grid; grid-template-columns: repeat(auto-fill, minmax(400px, 1fr)); gap: 2rem; margin-bottom: 3rem;">
                {{ range .Paginator.Pages }}
                <article class="minute-card" data-title="{{ .Title }}" data-date="{{ .Date.Format "2006-01-02" }}" data-year="{{ .Date.Year }}"
                         style="background: var(--bg-secondary); border: 1px solid var(--border-color); border-radius: 12px; 
                                padding: 2rem; transition: transform 0.3s ease, box-shadow 0.3s ease; cursor: pointer;"
                         onmouseover="this.style.transform='translateY(-4px)'; this.style.boxShadow='0 8px 32px rgba(74, 158, 255, 0.2)'"
                         onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='none'">
                    <header class="minute-header" style="margin-bottom: 1rem;">
                        <h2 style="margin-bottom: 0.5rem;">
                            <a href="{{ .RelPermalink }}" style="color: var(--accent-primary); text-decoration: none; font-size: 1.4rem;">
                                {{ .Title }}
                            </a>
                        </h2>
                        <time datetime="{{ .Date.Format "2006-01-02" }}" style="color: var(--text-muted); font-size: 0.95rem;">
                            {{ .Date.Format "January 2, 2006" }}
                        </time>
                    </header>
                    {{ if .Summary }}
                    <div class="minute-summary" style="color: var(--text-secondary); line-height: 1.6; margin-bottom: 1rem;">
                        {{ .Summary | truncate 200 }}
                    </div>
                    {{ end }}
                    <footer class="minute-footer">
                        <a href="{{ .RelPermalink }}" class="read-more" 
                           style="color: var(--accent-primary); text-decoration: none; font-weight: 600; 
                                  display: inline-flex; align-items: center; gap: 0.5rem;">
                            Read Minutes <span style="font-size: 1.2rem;">→</span>
                        </a>
                    </footer>
                </article>
                {{ end }}
            </div>
            
            <!-- Pagination -->
            {{ if gt .Paginator.TotalPages 1 }}
            <nav class="pagination" style="display: flex; justify-content: center; align-items: center; gap: 1rem; margin: 3rem 0;">
                {{ if .Paginator.HasPrev }}
                <a href="{{ .Paginator.Prev.URL }}" class="pagination-link prev" 
                   style="padding: 0.75rem 1.5rem; background: var(--bg-secondary); border: 1px solid var(--border-color); 
                          border-radius: 8px; text-decoration: none; color: var(--accent-primary); font-weight: 600;">
                    ← Previous
                </a>
                {{ end }}
                
                <div class="pagination-numbers" style="display: flex; gap: 0.5rem;">
                    {{ range .Paginator.Pagers }}
                    {{ if eq . $.Paginator }}
                    <span class="pagination-current" 
                          style="padding: 0.75rem 1rem; background: var(--accent-primary); color: white; 
                                 border-radius: 8px; font-weight: bold;">
                        {{ .PageNumber }}
                    </span>
                    {{ else }}
                    <a href="{{ .URL }}" class="pagination-link" 
                       style="padding: 0.75rem 1rem; background: var(--bg-secondary); border: 1px solid var(--border-color); 
                              border-radius: 8px; text-decoration: none; color: var(--accent-primary);">
                        {{ .PageNumber }}
                    </a>
                    {{ end }}
                    {{ end }}
                </div>
                
                {{ if .Paginator.HasNext }}
                <a href="{{ .Paginator.Next.URL }}" class="pagination-link next" 
                   style="padding: 0.75rem 1.5rem; background: var(--bg-secondary); border: 1px solid var(--border-color); 
                          border-radius: 8px; text-decoration: none; color: var(--accent-primary); font-weight: 600;">
                    Next →
                </a>
                {{ end }}
            </nav>
            {{ end }}
        </div>
        
        <!-- JavaScript for search and filtering -->
        <script>
        // Build search index from all pages
        let allYears = new Set();
        
        // Initialize year filter
        document.addEventListener('DOMContentLoaded', function() {
            const cards = document.querySelectorAll('.minute-card');
            cards.forEach(card => {
                allYears.add(card.dataset.year);
            });
            
            const yearFilter = document.getElementById('year-filter');
            Array.from(allYears).sort((a, b) => b - a).forEach(year => {
                const option = document.createElement('option');
                option.value = year;
                option.textContent = year;
                yearFilter.appendChild(option);
            });
        });
        
        // Year filter functionality
        document.getElementById('year-filter').addEventListener('change', function(e) {
            const selectedYear = e.target.value;
            const cards = document.querySelectorAll('.minute-card');
            
            cards.forEach(card => {
                if (!selectedYear || card.dataset.year === selectedYear) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        });
        
        // Search functionality
        document.getElementById('search').addEventListener('input', function(e) {
            const searchTerm = e.target.value.toLowerCase();
            const cards = document.querySelectorAll('.minute-card');
            
            if (searchTerm.length < 2) {
                cards.forEach(card => card.style.display = 'block');
                return;
            }
            
            cards.forEach(card => {
                const title = card.dataset.title.toLowerCase();
                const content = card.textContent.toLowerCase();
                
                if (title.includes(searchTerm) || content.includes(searchTerm)) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        });
        </script>
        {{ end }}
        EOF
        fi
        
        # Create single template (for individual minutes) if it doesn't exist
        if [ ! -f "themes/minutes-theme/layouts/_default/single.html" ]; then
          cat > themes/minutes-theme/layouts/_default/single.html << 'EOF'
        {{ define "title" }}{{ .Title }} - {{ .Site.Title }}{{ end }}
        
        {{ define "main" }}
        <div class="container" style="margin-top: var(--header-height); padding: 4rem 2rem;">
            <article class="minute-article">
                <header class="article-header" style="text-align: center; margin-bottom: 3rem;">
                    <h1 style="font-size: 2.5rem; color: var(--text-primary); margin-bottom: 1rem;">{{ .Title }}</h1>
                    <div class="article-meta" style="color: var(--text-muted); display: flex; justify-content: center; align-items: center; gap: 2rem; flex-wrap: wrap;">
                        <time datetime="{{ .Date.Format "2006-01-02" }}" style="font-size: 1.1rem;">
                            {{ .Date.Format "January 2, 2006" }}
                        </time>
                        <a href="{{ .Site.BaseURL }}" class="back-link" 
                           style="color: var(--accent-primary); text-decoration: none; font-weight: 600; 
                                  display: inline-flex; align-items: center; gap: 0.5rem;">
                            ← Back to All Minutes
                        </a>
                    </div>
                </header>
                
                <div class="article-content" 
                     style="background: var(--bg-secondary); padding: 3rem; border-radius: 12px; 
                            border: 1px solid var(--border-color); max-width: 900px; margin: 0 auto; 
                            color: var(--text-primary); line-height: 1.8;">
                    {{ .Content }}
                </div>
            </article>
        </div>
        
        <style>
        .article-content h1, .article-content h2, .article-content h3 {
            color: var(--accent-primary);
            margin-top: 2rem;
            margin-bottom: 1rem;
        }
        
        .article-content p {
            margin-bottom: 1.5rem;
        }
        
        .article-content ul, .article-content ol {
            margin-left: 2rem;
            margin-bottom: 1.5rem;
        }
        
        .article-content li {
            margin-bottom: 0.5rem;
        }
        
        .article-content blockquote {
            border-left: 4px solid var(--accent-primary);
            padding-left: 1rem;
            margin: 1.5rem 0;
            font-style: italic;
            color: var(--text-secondary);
        }
        
        .article-content code {
            background: var(--bg-primary);
            color: var(--terminal-green);
            padding: 0.2rem 0.5rem;
            border-radius: 4px;
            font-family: var(--font-mono);
        }
        
        .article-content pre {
            background: var(--bg-primary);
            color: var(--terminal-green);
            padding: 1rem;
            border-radius: 8px;
            overflow-x: auto;
            margin: 1.5rem 0;
            font-family: var(--font-mono);
        }
        </style>
        {{ end }}
        EOF
        fi
        
    - name: Convert and copy minutes
      run: |
        cd hugo-minutes
        
        # Clear existing content
        rm -rf content/*
        mkdir -p content
        
        # Check if minutes repo was successfully checked out
        if [ ! -d "../minutes-repo/minutes" ]; then
          echo "Minutes repository not found, creating placeholder content"
          cat > "content/placeholder.md" << EOF
        ---
        title: "No Minutes Available"
        date: $(date -I)T18:00:00-05:00
        draft: false
        ---
        
        # No meeting minutes available
        
        Minutes will be available when the minutes repository is accessible.
        EOF
          exit 0
        fi
        
        # Process each markdown file from the minutes repo
        processed_count=0
        for file in ../minutes-repo/minutes/*.md; do
          if [ -f "$file" ]; then
            filename=$(basename "$file" .md)
            
            # Extract date from filename (YYYYMMDD format)
            if [[ $filename =~ ^([0-9]{4})([0-9]{2})([0-9]{2})$ ]]; then
              year=${BASH_REMATCH[1]}
              month=${BASH_REMATCH[2]}
              day=${BASH_REMATCH[3]}
              
              # Validate date components
              if [ "$year" -ge 1996 ] && [ "$year" -le 2030 ] && [ "$month" -ge 1 ] && [ "$month" -le 12 ] && [ "$day" -ge 1 ] && [ "$day" -le 31 ]; then
                # Create content file with frontmatter
                cat > "content/${filename}.md" << EOF
        ---
        title: "Meeting Minutes - ${month}/${day}/${year}"
        date: ${year}-${month}-${day}T18:00:00-05:00
        draft: false
        ---
        
        EOF
                # Append the original content
                cat "$file" >> "content/${filename}.md"
                processed_count=$((processed_count + 1))
              else
                echo "Warning: Invalid date in filename $filename, skipping"
              fi
            else
              echo "Warning: Filename $filename doesn't match expected YYYYMMDD format, skipping"
            fi
          fi
        done
        
        echo "Processed $processed_count minute files"
        
    - name: Build Hugo site
      run: |
        cd hugo-minutes
        
        # Clean any previous build artifacts
        rm -rf public/*
        
        echo "Building Hugo site..."
        hugo --minify
        
        # Check if build was successful
        if [ ! -d "public" ] || [ ! -f "public/index.html" ]; then
          echo "Hugo build failed - public directory or index.html not found"
          exit 1
        fi
        
        echo "Hugo build completed successfully"
        
        # Verify assets are in the built site
        echo "Verifying assets in built site:"
        ls -la public/css/ || echo "Built CSS not found"
        ls -la public/js/ || echo "Built JS not found"  
        ls -la public/images/ || echo "Built images not found"
        ls -la public/favicon.ico || echo "Built favicon not found"
        
    - name: Deploy to minutes folder
      run: |
        # Backup existing minutes folder if it exists
        if [ -d "minutes" ]; then
          echo "Backing up existing minutes folder"
          mv minutes minutes-backup-$(date +%s)
        fi
        
        # Deploy new build
        echo "Deploying new minutes site"
        mv hugo-minutes/public minutes
        
        # Verify deployment
        if [ ! -f "minutes/index.html" ]; then
          echo "Deployment failed - index.html not found in minutes folder"
          if [ -d "minutes-backup-"* ]; then
            echo "Restoring backup"
            mv minutes-backup-* minutes
          fi
          exit 1
        fi
        
        echo "Minutes site deployed successfully"
        
    - name: Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add the minutes folder and hugo-minutes source (but not public/)
        git add minutes/
        git add hugo-minutes/hugo.toml
        git add hugo-minutes/content/
        git add hugo-minutes/themes/
        git add .gitignore
        
        # Check if there are any changes to commit
        if git diff --staged --quiet; then
          echo "No changes detected in minutes site"
        else
          echo "Changes detected, committing updates"
          # Get count of minutes for commit message
          minute_count=$(find minutes -name "*.html" -path "*/20*" | wc -l || echo "unknown")
          
          git commit -m "Update minutes site - $minute_count meeting records [skip ci]"
          git push
          echo "Changes committed and pushed successfully"
        fi
