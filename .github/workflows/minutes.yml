name: Build Minutes Site

on:
  schedule:
    # Run daily at 6 AM UTC to check for new minutes
    - cron: '0 6 * * *'
  workflow_dispatch:
    # Allow manual trigger

jobs:
  build-minutes:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout main repo
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Checkout minutes repo
      uses: actions/checkout@v4
      with:
        repository: ccowmu/minutes
        path: minutes-repo
        
    - name: Setup Hugo
      uses: peaceiris/actions-hugo@v3
      with:
        hugo-version: 'latest'
        extended: true
        
    - name: Setup Hugo site structure
      run: |
        # Hugo site already exists, just ensure config is updated
        cd hugo-minutes
        
        # Only create hugo.toml if it doesn't exist or needs updating
        if [ ! -f "hugo.toml" ]; then
          cat > hugo.toml << 'EOF'
        baseURL = '/'
        relativeURLs = true
        canonifyURLs = false
        languageCode = 'en-us'
        title = 'CCaWMU Meeting Minutes'
        theme = 'minutes-theme'

        [pagination]
        pagerSize = 20

        [markup]
        [markup.goldmark]
        [markup.goldmark.renderer]
        unsafe = true

        [params]
        clubName = 'Computer Club at WMU'
        description = 'Meeting minutes archive for CCaWMU'
        EOF
        fi
        
        # Ensure theme directory exists
        if [ ! -d "themes/minutes-theme" ]; then
          mkdir -p themes/minutes-theme/layouts/_default
          mkdir -p themes/minutes-theme/layouts/partials
          mkdir -p themes/minutes-theme/static/css
          mkdir -p themes/minutes-theme/static/js
          mkdir -p themes/minutes-theme/static/images
        fi
        
        # Always copy main site assets to Hugo theme (overwrite existing)
        echo "Copying main site assets to Hugo theme..."
        mkdir -p themes/minutes-theme/static/{css,js,images}
        cp -r ../css/* themes/minutes-theme/static/css/ || echo "Warning: CSS files not found"
        cp -r ../js/* themes/minutes-theme/static/js/ || echo "Warning: JS files not found"
        cp -r ../images/* themes/minutes-theme/static/images/ || echo "Warning: Image files not found"
        cp ../favicon.ico themes/minutes-theme/static/ || echo "Warning: Favicon not found"
        
        # Always copy includes as partials (overwrite existing)
        echo "Copying header and footer includes..."
        cp ../includes/header.html themes/minutes-theme/layouts/partials/ || echo "Warning: Header not found"
        cp ../includes/footer.html themes/minutes-theme/layouts/partials/ || echo "Warning: Footer not found"
        
        # Verify assets were copied
        echo "Verifying copied assets:"
        ls -la themes/minutes-theme/static/ || echo "Static directory not found"
        ls -la themes/minutes-theme/static/css/ || echo "CSS directory not found"
        ls -la themes/minutes-theme/static/js/ || echo "JS directory not found"
        ls -la themes/minutes-theme/static/images/ || echo "Images directory not found"
        
    - name: Create Hugo templates
      run: |
        cd hugo-minutes
        
        # Always recreate templates to ensure latest enhancements are applied
        echo "Creating Hugo templates with enhanced search functionality..."
        
        # Create base template
        cat > themes/minutes-theme/layouts/_default/baseof.html << 'EOF'
        <!DOCTYPE html>
        <html lang="{{ .Site.LanguageCode }}">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>{{ block "title" . }}{{ .Site.Title }}{{ end }}</title>
            <meta name="description" content="{{ .Site.Params.description }}">
            
            <!-- Favicon and Icons -->
            <link rel="icon" href="{{ "favicon.ico" | relURL }}" sizes="16x16 32x32">
            <link rel="icon" type="image/png" sizes="16x16" href="{{ "images/icon-16x16.png" | relURL }}">
            <link rel="icon" type="image/png" sizes="32x32" href="{{ "images/icon-32x32.png" | relURL }}">
            <link rel="icon" type="image/png" sizes="48x48" href="{{ "images/icon-48x48.png" | relURL }}">
            
            <!-- CSS -->
            <link rel="stylesheet" href="{{ "css/style.css" | relURL }}">
            <link rel="stylesheet" href="{{ "css/style.min.css" | relURL }}">
        </head>
        <body>
            <!-- Use the main site header -->
            {{ partial "header.html" . }}
            
            <main class="main-content">
                {{ block "main" . }}{{ end }}
            </main>
            
            <!-- Use the main site footer -->
            {{ partial "footer.html" . }}
            
            <!-- JavaScript -->
            <script src="{{ "js/main.js" | relURL }}" async></script>
        </body>
        </html>
        EOF
        
        # Create list template (for minutes index) with enhanced search
        cat > themes/minutes-theme/layouts/_default/list.html << 'EOF'
        {{ define "title" }}Meeting Minutes - {{ .Site.Title }}{{ end }}
        
        {{ define "main" }}
        <div class="container" style="margin-top: var(--header-height); padding: 4rem 2rem;">
            <header class="page-header" style="text-align: center; margin-bottom: 3rem;">
                <h1 style="font-size: 3rem; color: var(--text-primary); margin-bottom: 1rem;">Meeting Minutes</h1>
                <p style="color: var(--text-secondary); font-size: 1.2rem; margin-bottom: 2rem;">{{ .Site.Params.description }}</p>
                <div class="stats" style="display: flex; justify-content: center; gap: 2rem; color: var(--text-muted); font-size: 1rem;">
                    <span class="total-count">{{ len .Site.RegularPages }} total meetings</span>
                    <span class="current-page">Page {{ .Paginator.PageNumber }} of {{ .Paginator.TotalPages }}</span>
                </div>
            </header>
            
            <div class="search-controls" style="max-width: 900px; margin: 0 auto 3rem;">
                <div class="search-container" style="position: relative; margin-bottom: 1.5rem;">
                    <div class="search-input-wrapper" style="position: relative; display: flex; align-items: center;">
                        <div class="search-icon" style="position: absolute; left: 1rem; z-index: 1; color: var(--text-muted);">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
                            </svg>
                        </div>
                        <input type="text" id="search" placeholder="Search all meeting minutes..." 
                               style="width: 100%; padding: 1rem 3rem 1rem 3rem; border: 2px solid var(--border-color); border-radius: 12px; 
                                      background: var(--bg-secondary); color: var(--text-primary); font-size: 1.1rem; 
                                      transition: all 0.3s ease; box-shadow: 0 2px 8px rgba(0,0,0,0.1);"
                               onfocus="this.style.borderColor='var(--accent-primary)'; this.style.boxShadow='0 4px 16px rgba(74, 158, 255, 0.2)'"
                               onblur="this.style.borderColor='var(--border-color)'; this.style.boxShadow='0 2px 8px rgba(0,0,0,0.1)'" />
                        <div class="search-loader" id="search-loader" style="position: absolute; right: 1rem; display: none;">
                            <div style="width: 20px; height: 20px; border: 2px solid var(--border-color); border-top: 2px solid var(--accent-primary); border-radius: 50%; animation: spin 1s linear infinite;"></div>
                        </div>
                    </div>
                    
                    <!-- Search Results Dropdown -->
                    <div id="search-results" class="search-results" style="position: absolute; top: 100%; left: 0; right: 0; background: var(--bg-secondary); 
                         border: 1px solid var(--border-color); border-radius: 12px; box-shadow: 0 8px 32px rgba(0,0,0,0.2); 
                         max-height: 400px; overflow-y: auto; z-index: 1000; display: none; margin-top: 0.5rem;">
                    </div>
                </div>
                
                <div class="filter-controls" style="display: flex; gap: 1rem; flex-wrap: wrap; justify-content: center; align-items: center;">
                    <div class="year-filter-wrapper" style="position: relative;">
                        <select id="year-filter" 
                                style="padding: 0.75rem 1rem; border: 1px solid var(--border-color); border-radius: 8px; 
                                       background: var(--bg-secondary); color: var(--text-primary); font-size: 1rem; 
                                       cursor: pointer; transition: all 0.3s ease;"
                                onfocus="this.style.borderColor='var(--accent-primary)'"
                                onblur="this.style.borderColor='var(--border-color)'">
                            <option value="">All years</option>
                        </select>
                    </div>
                    
                    <div class="view-toggle" style="display: flex; background: var(--bg-primary); border-radius: 8px; padding: 0.25rem; border: 1px solid var(--border-color);">
                        <button id="grid-view" class="view-btn active" style="padding: 0.5rem 1rem; border: none; background: var(--accent-primary); color: white; border-radius: 6px; cursor: pointer; transition: all 0.3s ease;">Grid</button>
                        <button id="list-view" class="view-btn" style="padding: 0.5rem 1rem; border: none; background: transparent; color: var(--text-secondary); border-radius: 6px; cursor: pointer; transition: all 0.3s ease;">List</button>
                    </div>
                    
                    <div class="search-stats" id="search-stats" style="color: var(--text-muted); font-size: 0.9rem; padding: 0.5rem;">
                        <!-- Stats will be populated by JavaScript -->
                    </div>
                </div>
            </div>
            
            <div class="minutes-grid" id="minutes-list" 
                 style="display: grid; grid-template-columns: repeat(auto-fill, minmax(400px, 1fr)); gap: 2rem; margin-bottom: 3rem;">
                {{ range .Paginator.Pages }}
                <article class="minute-card" data-title="{{ .Title }}" data-date="{{ .Date.Format "2006-01-02" }}" data-year="{{ .Date.Year }}"
                         style="background: var(--bg-secondary); border: 1px solid var(--border-color); border-radius: 12px; 
                                padding: 2rem; transition: transform 0.3s ease, box-shadow 0.3s ease; cursor: pointer;"
                         onmouseover="this.style.transform='translateY(-4px)'; this.style.boxShadow='0 8px 32px rgba(74, 158, 255, 0.2)'"
                         onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='none'">
                    <header class="minute-header" style="margin-bottom: 1rem;">
                        <h2 style="margin-bottom: 0.5rem;">
                            <a href="{{ .RelPermalink }}" style="color: var(--accent-primary); text-decoration: none; font-size: 1.4rem;">
                                {{ .Title }}
                            </a>
                        </h2>
                        <time datetime="{{ .Date.Format "2006-01-02" }}" style="color: var(--text-muted); font-size: 0.95rem;">
                            {{ .Date.Format "January 2, 2006" }}
                        </time>
                    </header>
                    {{ if .Summary }}
                    <div class="minute-summary" style="color: var(--text-secondary); line-height: 1.6; margin-bottom: 1rem;">
                        {{ .Summary | truncate 200 }}
                    </div>
                    {{ end }}
                    <footer class="minute-footer">
                        <a href="{{ .RelPermalink }}" class="read-more" 
                           style="color: var(--accent-primary); text-decoration: none; font-weight: 600; 
                                  display: inline-flex; align-items: center; gap: 0.5rem;">
                            Read Minutes <span style="font-size: 1.2rem;">→</span>
                        </a>
                    </footer>
                </article>
                {{ end }}
            </div>
            
            <!-- Pagination -->
            {{ if gt .Paginator.TotalPages 1 }}
            <nav class="pagination" style="display: flex; justify-content: center; align-items: center; gap: 1rem; margin: 3rem 0;">
                {{ if .Paginator.HasPrev }}
                <a href="{{ .Paginator.Prev.URL }}" class="pagination-link prev" 
                   style="padding: 0.75rem 1.5rem; background: var(--bg-secondary); border: 1px solid var(--border-color); 
                          border-radius: 8px; text-decoration: none; color: var(--accent-primary); font-weight: 600;">
                    ← Previous
                </a>
                {{ end }}
                
                <div class="pagination-numbers" style="display: flex; gap: 0.5rem;">
                    {{ range .Paginator.Pagers }}
                    {{ if eq . $.Paginator }}
                    <span class="pagination-current" 
                          style="padding: 0.75rem 1rem; background: var(--accent-primary); color: white; 
                                 border-radius: 8px; font-weight: bold;">
                        {{ .PageNumber }}
                    </span>
                    {{ else }}
                    <a href="{{ .URL }}" class="pagination-link" 
                       style="padding: 0.75rem 1rem; background: var(--bg-secondary); border: 1px solid var(--border-color); 
                              border-radius: 8px; text-decoration: none; color: var(--accent-primary);">
                        {{ .PageNumber }}
                    </a>
                    {{ end }}
                    {{ end }}
                </div>
                
                {{ if .Paginator.HasNext }}
                <a href="{{ .Paginator.Next.URL }}" class="pagination-link next" 
                   style="padding: 0.75rem 1.5rem; background: var(--bg-secondary); border: 1px solid var(--border-color); 
                          border-radius: 8px; text-decoration: none; color: var(--accent-primary); font-weight: 600;">
                    Next →
                </a>
                {{ end }}
            </nav>
            {{ end }}
        </div>
        
        <!-- JavaScript for enhanced search and filtering -->
        <script>
        // Global search index for all minutes
        let searchIndex = [];
        let allYears = new Set();
        let currentView = 'grid';
        let searchTimeout;
        
        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            buildSearchIndex();
            initializeFilters();
            initializeViewToggle();
            updateSearchStats();
            
            // Add CSS animations
            const style = document.createElement('style');
            style.textContent = `
                @keyframes spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                }
                
                @keyframes fadeIn {
                    from { opacity: 0; transform: translateY(-10px); }
                    to { opacity: 1; transform: translateY(0); }
                }
                
                .search-result-item {
                    animation: fadeIn 0.3s ease;
                }
                
                .minute-card {
                    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                }
                
                .minute-card.hidden {
                    display: none !important;
                }
                
                .minute-card.list-view {
                    grid-column: 1 / -1;
                    display: flex;
                    align-items: center;
                    padding: 1.5rem 2rem;
                    margin-bottom: 1rem;
                }
                
                .minute-card.list-view .minute-header {
                    flex: 1;
                    margin-bottom: 0;
                }
                
                .minute-card.list-view .minute-summary {
                    display: none;
                }
                
                .highlight {
                    background: var(--accent-primary);
                    color: white;
                    padding: 0.1rem 0.3rem;
                    border-radius: 3px;
                    font-weight: bold;
                }
            `;
            document.head.appendChild(style);
        });
        
        // Build comprehensive search index from all minutes
        async function buildSearchIndex() {
            const cards = document.querySelectorAll('.minute-card');
            searchIndex = [];
            
            for (const card of cards) {
                const title = card.dataset.title;
                const date = card.dataset.date;
                const year = card.dataset.year;
                const url = card.querySelector('a').href;
                const summary = card.querySelector('.minute-summary')?.textContent || '';
                
                allYears.add(year);
                
                // Try to fetch full content for better search
                let fullContent = summary;
                try {
                    // This would require CORS support, so we'll stick with summary for now
                    // In a real implementation, we'd build this index during site generation
                    fullContent = card.textContent.toLowerCase();
                } catch (e) {
                    // Use summary as fallback
                }
                
                searchIndex.push({
                    title,
                    date,
                    year,
                    url,
                    summary,
                    content: fullContent,
                    element: card,
                    searchText: (title + ' ' + summary + ' ' + date).toLowerCase()
                });
            }
        }
        
        // Initialize year filter and other controls
        function initializeFilters() {
            const yearFilter = document.getElementById('year-filter');
            
            // Populate year filter
            Array.from(allYears).sort((a, b) => b - a).forEach(year => {
                const option = document.createElement('option');
                option.value = year;
                option.textContent = year;
                yearFilter.appendChild(option);
            });
            
            // Year filter event listener
            yearFilter.addEventListener('change', function(e) {
                filterByYear(e.target.value);
                updateSearchStats();
            });
        }
        
        // Initialize view toggle functionality
        function initializeViewToggle() {
            const gridBtn = document.getElementById('grid-view');
            const listBtn = document.getElementById('list-view');
            const minutesGrid = document.getElementById('minutes-list');
            
            gridBtn.addEventListener('click', () => switchView('grid'));
            listBtn.addEventListener('click', () => switchView('list'));
            
            function switchView(view) {
                currentView = view;
                
                // Update button states
                [gridBtn, listBtn].forEach(btn => {
                    btn.classList.remove('active');
                    btn.style.background = 'transparent';
                    btn.style.color = 'var(--text-secondary)';
                });
                
                const activeBtn = view === 'grid' ? gridBtn : listBtn;
                activeBtn.classList.add('active');
                activeBtn.style.background = 'var(--accent-primary)';
                activeBtn.style.color = 'white';
                
                // Update grid layout
                if (view === 'list') {
                    minutesGrid.style.gridTemplateColumns = '1fr';
                    minutesGrid.style.gap = '1rem';
                    document.querySelectorAll('.minute-card').forEach(card => {
                        card.classList.add('list-view');
                    });
                } else {
                    minutesGrid.style.gridTemplateColumns = 'repeat(auto-fill, minmax(400px, 1fr))';
                    minutesGrid.style.gap = '2rem';
                    document.querySelectorAll('.minute-card').forEach(card => {
                        card.classList.remove('list-view');
                    });
                }
            }
        }
        
        // Enhanced search functionality
        const searchInput = document.getElementById('search');
        const searchResults = document.getElementById('search-results');
        const searchLoader = document.getElementById('search-loader');
        
        searchInput.addEventListener('input', function(e) {
            const searchTerm = e.target.value.trim();
            
            // Clear previous timeout
            clearTimeout(searchTimeout);
            
            if (searchTerm.length === 0) {
                hideSearchResults();
                showAllCards();
                updateSearchStats();
                return;
            }
            
            if (searchTerm.length < 2) {
                return;
            }
            
            // Show loader
            searchLoader.style.display = 'block';
            
            // Debounce search
            searchTimeout = setTimeout(() => {
                performSearch(searchTerm);
                searchLoader.style.display = 'none';
            }, 300);
        });
        
        // Perform the actual search
        function performSearch(searchTerm) {
            const results = searchIndex.filter(item => {
                return item.searchText.includes(searchTerm.toLowerCase());
            });
            
            // Sort results by relevance (title matches first, then date)
            results.sort((a, b) => {
                const aTitle = a.title.toLowerCase().includes(searchTerm.toLowerCase());
                const bTitle = b.title.toLowerCase().includes(searchTerm.toLowerCase());
                
                if (aTitle && !bTitle) return -1;
                if (!aTitle && bTitle) return 1;
                
                // Secondary sort by date (newest first)
                return new Date(b.date) - new Date(a.date);
            });
            
            // Show search results dropdown
            displaySearchResults(results.slice(0, 8), searchTerm); // Limit to 8 results
            
            // Filter main grid
            filterMainGrid(results);
            updateSearchStats(results.length, searchTerm);
        }
        
        // Display search results in dropdown
        function displaySearchResults(results, searchTerm) {
            if (results.length === 0) {
                searchResults.innerHTML = `
                    <div style="padding: 2rem; text-align: center; color: var(--text-muted);">
                        <svg width="48" height="48" viewBox="0 0 24 24" fill="currentColor" style="margin-bottom: 1rem; opacity: 0.5;">
                            <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
                        </svg>
                        <div>No minutes found for "${searchTerm}"</div>
                        <div style="font-size: 0.9rem; margin-top: 0.5rem;">Try a different search term</div>
                    </div>
                `;
            } else {
                const resultsHTML = results.map(result => {
                    const highlightedTitle = highlightSearchTerm(result.title, searchTerm);
                    const highlightedSummary = highlightSearchTerm(result.summary, searchTerm);
                    const truncatedSummary = highlightedSummary.length > 100 ? 
                        highlightedSummary.substring(0, 100) + '...' : highlightedSummary;
                    
                    return `
                        <div class="search-result-item" style="padding: 1rem; border-bottom: 1px solid var(--border-color); cursor: pointer; transition: background 0.2s ease;"
                             onmouseover="this.style.background='var(--bg-primary)'"
                             onmouseout="this.style.background='transparent'"
                             onclick="window.location.href='${result.url}'">
                            <div style="font-weight: 600; color: var(--accent-primary); margin-bottom: 0.5rem;">
                                ${highlightedTitle}
                            </div>
                            <div style="font-size: 0.9rem; color: var(--text-muted); margin-bottom: 0.5rem;">
                                ${new Date(result.date).toLocaleDateString('en-US', { 
                                    year: 'numeric', 
                                    month: 'long', 
                                    day: 'numeric' 
                                })}
                            </div>
                            ${truncatedSummary ? `<div style="color: var(--text-secondary); font-size: 0.9rem; line-height: 1.4;">${truncatedSummary}</div>` : ''}
                        </div>
                    `;
                }).join('');
                
                searchResults.innerHTML = resultsHTML + 
                    (results.length < searchIndex.filter(item => item.searchText.includes(searchTerm.toLowerCase())).length ? 
                        `<div style="padding: 1rem; text-align: center; color: var(--text-muted); font-size: 0.9rem; border-top: 1px solid var(--border-color);">
                            Showing top ${results.length} results. Scroll down to see all matches.
                         </div>` : '');
            }
            
            searchResults.style.display = 'block';
        }
        
        // Highlight search terms in text
        function highlightSearchTerm(text, searchTerm) {
            if (!text || !searchTerm) return text;
            
            const regex = new RegExp(`(${searchTerm})`, 'gi');
            return text.replace(regex, '<span class="highlight">$1</span>');
        }
        
        // Filter main grid based on search results
        function filterMainGrid(results) {
            const resultUrls = new Set(results.map(r => r.url));
            
            document.querySelectorAll('.minute-card').forEach(card => {
                const cardUrl = card.querySelector('a').href;
                if (resultUrls.has(cardUrl)) {
                    card.style.display = 'block';
                    card.classList.remove('hidden');
                } else {
                    card.style.display = 'none';
                    card.classList.add('hidden');
                }
            });
        }
        
        // Filter by year
        function filterByYear(selectedYear) {
            const searchTerm = searchInput.value.trim();
            let cardsToShow = searchIndex;
            
            // Apply year filter
            if (selectedYear) {
                cardsToShow = cardsToShow.filter(item => item.year === selectedYear);
            }
            
            // Apply search filter if exists
            if (searchTerm.length >= 2) {
                cardsToShow = cardsToShow.filter(item => 
                    item.searchText.includes(searchTerm.toLowerCase())
                );
            }
            
            // Update display
            filterMainGrid(cardsToShow);
            
            if (searchTerm.length >= 2) {
                displaySearchResults(cardsToShow.slice(0, 8), searchTerm);
            }
        }
        
        // Show all cards
        function showAllCards() {
            document.querySelectorAll('.minute-card').forEach(card => {
                card.style.display = 'block';
                card.classList.remove('hidden');
            });
        }
        
        // Hide search results dropdown
        function hideSearchResults() {
            searchResults.style.display = 'none';
        }
        
        // Update search statistics
        function updateSearchStats(resultCount = null, searchTerm = '') {
            const statsElement = document.getElementById('search-stats');
            const visibleCards = document.querySelectorAll('.minute-card:not(.hidden)').length;
            const totalCards = document.querySelectorAll('.minute-card').length;
            
            if (resultCount !== null && searchTerm) {
                statsElement.textContent = `Found ${resultCount} result${resultCount !== 1 ? 's' : ''} for "${searchTerm}"`;
            } else {
                statsElement.textContent = `Showing ${visibleCards} of ${totalCards} meetings`;
            }
        }
        
        // Hide search results when clicking outside
        document.addEventListener('click', function(e) {
            if (!searchInput.contains(e.target) && !searchResults.contains(e.target)) {
                hideSearchResults();
            }
        });
        
        // Keyboard navigation for search results
        searchInput.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                hideSearchResults();
            }
        });
        </script>
        {{ end }}
        EOF
        
        # Create single template (for individual minutes) with enhanced styling
        cat > themes/minutes-theme/layouts/_default/single.html << 'EOF'
        {{ define "title" }}{{ .Title }} - {{ .Site.Title }}{{ end }}
        
        {{ define "main" }}
        <div class="container" style="margin-top: var(--header-height); padding: 4rem 2rem;">
            <article class="minute-article">
                <header class="article-header" style="text-align: center; margin-bottom: 3rem;">
                    <h1 style="font-size: 2.5rem; color: var(--text-primary); margin-bottom: 1rem;">{{ .Title }}</h1>
                    <div class="article-meta" style="color: var(--text-muted); display: flex; justify-content: center; align-items: center; gap: 2rem; flex-wrap: wrap;">
                        <time datetime="{{ .Date.Format "2006-01-02" }}" style="font-size: 1.1rem;">
                            {{ .Date.Format "January 2, 2006" }}
                        </time>
                        <a href="{{ "/" | relURL }}" class="back-link" 
                           style="color: var(--accent-primary); text-decoration: none; font-weight: 600; 
                                  display: inline-flex; align-items: center; gap: 0.5rem;">
                            ← Back to All Minutes
                        </a>
                    </div>
                </header>
                
                <div class="article-content" 
                     style="background: var(--bg-secondary); padding: 3rem; border-radius: 12px; 
                            border: 1px solid var(--border-color); max-width: 900px; margin: 0 auto; 
                            color: var(--text-primary); line-height: 1.8;">
                    {{ .Content }}
                </div>
            </article>
        </div>
        
        <style>
        .article-content h1, .article-content h2, .article-content h3 {
            color: var(--accent-primary);
            margin-top: 2rem;
            margin-bottom: 1rem;
        }
        
        .article-content p {
            margin-bottom: 1.5rem;
        }
        
        .article-content ul, .article-content ol {
            margin-left: 2rem;
            margin-bottom: 1.5rem;
        }
        
        .article-content li {
            margin-bottom: 0.5rem;
        }
        
        .article-content blockquote {
            border-left: 4px solid var(--accent-primary);
            padding-left: 1rem;
            margin: 1.5rem 0;
            font-style: italic;
            color: var(--text-secondary);
        }
        
        .article-content code {
            background: var(--bg-primary);
            color: var(--terminal-green);
            padding: 0.2rem 0.5rem;
            border-radius: 4px;
            font-family: var(--font-mono);
        }
        
        .article-content pre {
            background: var(--bg-primary);
            color: var(--terminal-green);
            padding: 1rem;
            border-radius: 8px;
            overflow-x: auto;
            margin: 1.5rem 0;
            font-family: var(--font-mono);
        }
        </style>
        {{ end }}
        EOF
        
    - name: Convert and copy minutes
      run: |
        cd hugo-minutes
        
        # Clear existing content
        rm -rf content/*
        mkdir -p content
        
        # Check if minutes repo was successfully checked out
        if [ ! -d "../minutes-repo/minutes" ]; then
          echo "Minutes repository not found, creating placeholder content"
          cat > "content/placeholder.md" << EOF
        ---
        title: "No Minutes Available"
        date: $(date -I)T18:00:00-05:00
        draft: false
        ---
        
        # No meeting minutes available
        
        Minutes will be available when the minutes repository is accessible.
        EOF
          exit 0
        fi
        
        # Process each markdown file from the minutes repo
        processed_count=0
        for file in ../minutes-repo/minutes/*.md; do
          if [ -f "$file" ]; then
            filename=$(basename "$file" .md)
            
            # Extract date from filename (YYYYMMDD format)
            if [[ $filename =~ ^([0-9]{4})([0-9]{2})([0-9]{2})$ ]]; then
              year=${BASH_REMATCH[1]}
              month=${BASH_REMATCH[2]}
              day=${BASH_REMATCH[3]}
              
              # Validate date components
              if [ "$year" -ge 1996 ] && [ "$year" -le 2030 ] && [ "$month" -ge 1 ] && [ "$month" -le 12 ] && [ "$day" -ge 1 ] && [ "$day" -le 31 ]; then
                # Create content file with frontmatter
                cat > "content/${filename}.md" << EOF
        ---
        title: "Meeting Minutes - ${month}/${day}/${year}"
        date: ${year}-${month}-${day}T18:00:00-05:00
        draft: false
        ---
        
        EOF
                # Append the original content
                cat "$file" >> "content/${filename}.md"
                processed_count=$((processed_count + 1))
              else
                echo "Warning: Invalid date in filename $filename, skipping"
              fi
            else
              echo "Warning: Filename $filename doesn't match expected YYYYMMDD format, skipping"
            fi
          fi
        done
        
        echo "Processed $processed_count minute files"
        
    - name: Build Hugo site
      run: |
        cd hugo-minutes
        
        # Clean any previous build artifacts and Hugo cache
        rm -rf public/*
        rm -rf resources/
        
        echo "Building Hugo site with enhanced search functionality..."
        hugo --minify --cleanDestinationDir
        
        # Check if build was successful
        if [ ! -d "public" ] || [ ! -f "public/index.html" ]; then
          echo "Hugo build failed - public directory or index.html not found"
          exit 1
        fi
        
        echo "Hugo build completed successfully"
        
        # Verify assets are in the built site
        echo "Verifying assets in built site:"
        ls -la public/css/ || echo "Built CSS not found"
        ls -la public/js/ || echo "Built JS not found"  
        ls -la public/images/ || echo "Built images not found"
        ls -la public/favicon.ico || echo "Built favicon not found"
        
    - name: Deploy to minutes folder
      run: |
        # Backup existing minutes folder if it exists
        if [ -d "minutes" ]; then
          echo "Backing up existing minutes folder"
          mv minutes minutes-backup-$(date +%s)
        fi
        
        # Deploy new build
        echo "Deploying new minutes site"
        mv hugo-minutes/public minutes
        
        # Verify deployment
        if [ ! -f "minutes/index.html" ]; then
          echo "Deployment failed - index.html not found in minutes folder"
          if [ -d "minutes-backup-"* ]; then
            echo "Restoring backup"
            mv minutes-backup-* minutes
          fi
          exit 1
        fi
        
        echo "Minutes site deployed successfully"
        
    - name: Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add the minutes folder and hugo-minutes source (but not public/)
        git add minutes/
        git add hugo-minutes/hugo.toml
        git add hugo-minutes/content/
        git add hugo-minutes/themes/
        git add .gitignore
        
        # Check if there are any changes to commit
        if git diff --staged --quiet; then
          echo "No changes detected in minutes site"
        else
          echo "Changes detected, committing updates"
          # Get count of minutes for commit message
          minute_count=$(find minutes -name "*.html" -path "*/20*" | wc -l || echo "unknown")
          timestamp=$(date '+%Y-%m-%d %H:%M:%S UTC')
          
          git commit -m "Update minutes site with enhanced search - $minute_count records - $timestamp [skip ci]"
          git push
          echo "Changes committed and pushed successfully"
        fi
