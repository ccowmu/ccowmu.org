name: Hugo Minutes Content Generator

on:
  # Daily at 6 AM UTC
  schedule:
    - cron: '0 6 * * *'
  
  # Manual trigger
  workflow_dispatch:
  
  # On push to main branch (for testing)
  push:
    branches: [ main, master ]

permissions:
  contents: write  # Need write access to commit generated content

jobs:
  generate-minutes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'
          extended: true
      
      - name: Checkout minutes repository
        uses: actions/checkout@v4
        with:
          repository: ccowmu/minutes
          path: minutes-repo
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Process minutes files
        run: |
          # Create content directory
          mkdir -p content/minutes
          
          # Process each markdown file in the minutes repo
          find minutes-repo -name "*.md" -type f | while read file; do
            filename=$(basename "$file" .md)
            
            # Extract date from filename (YYYYMMDD format)
            if [[ $filename =~ ^([0-9]{4})([0-9]{2})([0-9]{2})$ ]]; then
              year=${BASH_REMATCH[1]}
              month=${BASH_REMATCH[2]}
              day=${BASH_REMATCH[3]}
              
              # Create ISO date
              iso_date="${year}-${month}-${day}"
              
              # Create human-readable title
              title="Meeting Minutes - $(date -d "$iso_date" '+%B %-d, %Y' 2>/dev/null || date -j -f '%Y-%m-%d' "$iso_date" '+%B %-d, %Y')"
              
              # Create output file
              output_file="content/minutes/${filename}.md"
              
              # Create frontmatter and content
              cat > "$output_file" << EOF
          ---
          title: "$title"
          date: ${iso_date}T12:00:00-05:00
          draft: false
          type: "minutes"
          ---
          
          EOF
              
              # Append the original content
              cat "$file" >> "$output_file"
              
              echo "Processed: $filename -> $title"
            else
              echo "Skipping file with invalid date format: $filename"
            fi
          done
          
          # Generate years data for filtering
          mkdir -p data
          find content/minutes -name "*.md" -exec grep -l "^date:" {} \; | \
            xargs grep "^date:" | \
            sed 's/.*date: \([0-9]\{4\}\).*/\1/' | \
            sort -u > data/years.json
          
          # Convert to proper JSON array
          echo -n "[" > temp_years.json
          first=true
          while read year; do
            if [ "$first" = true ]; then
              echo -n "\"$year\"" >> temp_years.json
              first=false
            else
              echo -n ", \"$year\"" >> temp_years.json
            fi
          done < data/years.json
          echo "]" >> temp_years.json
          mv temp_years.json data/years.json
          
          echo "Generated years data: $(cat data/years.json)"
      
      - name: Commit generated content
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add the generated content
          git add content/minutes/ data/years.json
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Auto-update minutes content from ccowmu/minutes repo
            
            - Processed $(find content/minutes -name "*.md" | wc -l) minutes files
            - Updated years data: $(cat data/years.json)
            - Generated on $(date)"
            
            git push
            echo "✅ Minutes content updated and committed"
          fi
      
      - name: Generate build statistics
        run: |
          echo "Content generation completed!"
          echo "Build statistics:"
          echo "- Total minutes processed: $(find content/minutes -name "*.md" | wc -l)"
          echo "- Years available: $(cat data/years.json)"
          echo "- Content ready for Hugo build"
      
      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Hugo Minutes Generator failed!"
          echo "Check the logs above for details."
          echo "Common issues:"
          echo "- Invalid date format in minutes filenames"
          echo "- Hugo build errors"
          echo "- Missing dependencies"
          echo "- Network issues accessing minutes repository"
